\newcommand{\calculateStep}{
  \pgfmathsetmacro{\step}{\boardDimension / (\boardSize - 1)} % chktex 1
}

\newif\ifcoords
\newif\ifcoordsTop
\newif\ifcoordsRight
\newif\ifcoordsBottom
\newif\ifcoordsLeft

% From [this answer by @UlrichDiez](https://tex.stackexchange.com/a/709341/64441).
\pgfkeys{%
  %---------------------------------------------------------
  /phili/goGrid/.cd, 
    %-------------------------------------------------------
    % Dimensions
    board dimension/.store in    = \boardDimension,
    board dimension              = 10cm,
    board size/.store in         = \boardSize,
    board size                   = 19,
    %-------------------------------------------------------
    % Outline
    outline line width/.store in = \boardOutlineWidth,
    outline line width           = 0.7mm,
    %-------------------------------------------------------
    % Coordinates
    coords/.is if                = coords,
    coords                       = true,
    coords top/.is if            = coordsTop,
    coords top                   = true,
    coords right/.is if          = coordsRight,
    coords right                 = true,
    coords bottom/.is if         = coordsBottom,
    coords bottom                = true,
    coords left/.is if           = coordsLeft,
    coords left                  = true,
    coords font/.store in        = \coordsFont,
    coords font                  = ,
    coords font size/.store in   = \coordsFontSize,
    coords font size             = 10pt,
    %-------------------------------------------------------
  %---------------------------------------------------------
  /phili/goban/.search also={/phili/goGrid},
  /phili/goban/.cd,  
    %-------------------------------------------------------
    % Scale
    scale/.store in              = \scale,
    scale                        = 1,
    %-------------------------------------------------------
    % Partial Boards
    horizontal clip start/.store in = \horClipStart,
    horizontal clip start           = 0,
    horizontal clip end/.store in   = \horClipEnd,
    horizontal clip end             = 0,
    vertical clip start/.store in   = \verClipStart,
    vertical clip start             = 0,
    vertical clip end/.store in     = \verClipEnd,
    vertical clip end               = 0,
  %---------------------------------------------------------
}

% Parameters
%
% - board dimension (in cm)
% - board size (square)
% 
% Example: A 19x19 board with size 10cm x 10cm:
%
% ```tex
% \goGrid[board dimension    = 10,
%         board size         = 9,
%         scale              = 1,
%         outline line width = 0.5mm,
%         coords             = true,
%         coords top         = false,
%         coords right       = false,
%         coords font        = \sffamily,
%         coords font size   = 15pt]
% ```
\newcommand{\goGrid}[1][]{
  \pgfkeys{/phili/goGrid/.cd, #1}

  \calculateStep

  \draw[step=\step] (0, 0) grid
    (\boardDimension, \boardDimension);
  
  \boardOutline{\boardDimension}
  
  \ifcoords
    \coordinates
  \fi

  \drawHoshis
}

% Reference: [Drawing a Non-Jagged Grid Outline](https://tex.stackexchange.com/q/709298/64441)
%
% Parameters
%
% 1: dimension (in cm)
% 
% Example: `\boardOutline{10}`
\newcommand{\boardOutline}[1]{
  \draw[step       = #1,
        line width = \boardOutlineWidth,
        line cap   = rect] 
    (0, 0) grid (#1, #1);
}

\newcounter{coordinateCounter}
\setcounter{coordinateCounter}{1}
% Parameters
%
% 1: dimension (in cm)
% 2: board size (square)
% 3: step
% 
% Example: A 19x19 board with size 10cm x 10cm: `\coordinates{10}{19}{\step}`
\newcommand{\coordinates}{
  \pgfmathsetmacro{\leftRightShift}{1.9 * (\step cm / 2)}
  \pgfmathsetmacro{\topBottomShift}{1.8 * (\step cm / 2)}
  
  \def\customFont{\fontsize{\coordsFontSize}{5pt} \coordsFont}

  \foreach [count=\i] \l in {A, B, ..., Z} {
    \ifthenelse{\equal{\l}{I} \OR \i > \numexpr \boardSize + 1 \relax}{}{
      \pgfmathsetmacro{\coordinateShiftVertical}{
         \step cm * (\thecoordinateCounter - 1)
      }
      \pgfmathsetmacro{\coordinateShiftHorizontal}{
         \step cm * (\thecoordinateCounter - 1) - 1pt
      }

      \ifcoordsTop
        \draw[
          xshift = \coordinateShiftHorizontal,
          yshift = \boardDimension cm + \topBottomShift,
          font   = \customFont,
        ] node {\l};
      \fi
      \ifcoordsRight
        \draw[
          xshift = \boardDimension cm + \leftRightShift,
          yshift = \coordinateShiftVertical,
          font   = \customFont,
        ] node {\thecoordinateCounter};
      \fi
      \ifcoordsBottom
        \draw[
          xshift = \coordinateShiftHorizontal,
          yshift = -\leftRightShift,
          font   = \customFont,
        ] node {\l};
      \fi
      \ifcoordsLeft
        \draw[
          xshift = -\leftRightShift,
          yshift = \coordinateShiftVertical,
          font   = \customFont,
        ] node {\thecoordinateCounter};
      \fi

      \stepcounter{coordinateCounter}
    }
  }
  \setcounter{coordinateCounter}{1}
}

% Example: A 19x19 board with size 10cm x 10cm: `\drawHoshis`
\newcommand{\drawHoshis}{
  \tikzmath{
    \hoshiRadius = \step * 0.125;
    %
    \centerHoshi = ceil(\boardSize / 2);
    %
    int \hoshiDistance;
    if \boardSize<12 then {
      \hoshiDistance = 3;
    } else {
      \hoshiDistance = 4;
    };
    %
    \hoshiComplement = \boardSize - \hoshiDistance + 1;
  }

  \drawCenterHoshi
  \drawCornerHoshis
  \ifnum\boardSize>6\relax
    \drawCornerHoshis
  \fi
  \ifthenelse{\isodd{\boardSize}}{
    \ifnum\boardSize>13\relax
      \drawSideHoshis
    \fi
  }{}
}

\newcommand{\drawCenterHoshi}{
  \pgfmathsetmacro{\centerHoshiCoord}{(\centerHoshi - 1) * \step}

  \filldraw (\centerHoshiCoord, \centerHoshiCoord)
    circle [radius=\hoshiRadius];
}

\newcommand{\drawCornerHoshis}{
  \def\cornerHoshisArray{%
    {\hoshiDistance, \hoshiDistance},%
    {\hoshiComplement, \hoshiDistance},%
    {\hoshiDistance, \hoshiComplement },%
    {\hoshiComplement, \hoshiComplement}%
  }

  \loopOverHoshis{\cornerHoshisArray}
}

\newcommand{\loopOverHoshis}[1]{
  \foreach \sloc in #1 {
    \pgfmathsetmacro{\hoshiCoordX}{\step * ({\sloc}[0] - 1)}
    \pgfmathsetmacro{\hoshiCoordY}{\step * ({\sloc}[1] - 1)}

    \filldraw (\hoshiCoordX, \hoshiCoordY)
      circle [radius=\hoshiRadius];
  }
}

\newcommand{\drawSideHoshis}{
  \def\sideHoshisArray{%
    {\hoshiDistance, \centerHoshi},%
    {\centerHoshi, \hoshiComplement},%
    {\centerHoshi, \hoshiDistance},%
    {\hoshiComplement, \centerHoshi}%
  }    

  \loopOverHoshis{\sideHoshisArray}
}